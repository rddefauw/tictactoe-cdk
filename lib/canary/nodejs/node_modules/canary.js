var synthetics = require('Synthetics');
const FormData = require('form-data');
const log = require('SyntheticsLogger');
var rHeaders = {};

/*
In order to create a game, we need to:

1. Log in with a POST to /index.  Must includes `username` as form data.
2. Create table with GET to /table
3. Make a POST to /play

We need to save cookies in between each call to persist the session data.


request.post({
    url: 'https://exampleurl.com/login',
    form: {"login":"xxxx", "password":"xxxx"}
}, function(error, response, body){

    request.get({
        url:"https://exampleurl.com/logged",
        header: response.headers
    },function(error, response, body){
        // The full html of the authenticated page
        console.log(body);
    });
});


*/
const apiCanaryBlueprint = async function () {
    
    const endpoint = process.env.ENDPOINT

    // Post user name for session
    const postUser = async function(res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode != 302) {
                throw res.statusCode + ' ' + res.statusMessage;
            }

            rHeaders = res.headers;
     
            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });
     
            res.on('end', () => {
                // Add validation on 'responseBody' here if required. For ex, your status code is 200 but data might be empty
                resolve();
            });
        });
    };
    
    let requestOptionsStep1 = {
        'hostname': endpoint,
        'method': 'POST',
        'path': '/index',
//        'body': JSON.stringify({ 'form': { 'username': 'canary'}}),
        'port': 80,
        'protocol': 'http:'
    };
    
    const form = new FormData();
    form.append('username', 'canary');
    form.append('invitee', 'opponent');

    let headers = form.getHeaders();
    headers['User-Agent'] = [synthetics.getCanaryUserAgentString(), headers['User-Agent']].join(' ');
    
    requestOptionsStep1['headers'] = headers;

    // By default headers, post data and response body are not included in the report for security reasons. 
    // Change the configuration at global level or add as step configuration for individual steps
    let stepConfig = {
        includeRequestHeaders: true, 
        includeResponseHeaders: true,
        restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'], // Restricted header values do not appear in report generated.
        includeRequestBody: true,
        includeResponseBody: true
    };
       

    await synthetics.executeHttpStep('Verify log in with user ID', requestOptionsStep1, postUser, stepConfig);
    
    // Make sure tables are created
    const getTable = async function(res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode != 302) {
                throw res.statusCode + ' ' + res.statusMessage;
            }
            rHeaders = res.headers;
     
            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });
     
            res.on('end', () => {
                // Add validation on 'responseBody' here if required. For ex, your status code is 200 but data might be empty
                resolve();
            });
        });
    };
    
    let requestOptionsStep2 = {
        'hostname': endpoint,
        'method': 'GET',
        'path': '/table',
        'port': 80,
        'protocol': 'http:'
    };
    
    headers['set-cookie'] = rHeaders['set-cookie'];
    requestOptionsStep2['headers'] = headers;

    await synthetics.executeHttpStep('Verify tables created', requestOptionsStep2, getTable, stepConfig);
    
    // Start a game
    const startGame = async function(res) {
        return new Promise((resolve, reject) => {
            if (res.statusCode != 302) {
                throw res.statusCode + ' ' + res.statusMessage;
            }
            rHeaders = res.headers;

            if (res.headers['location'].includes('/create')) {
                throw 'Got wrong redirect'
            }
    
            let responseBody = '';
            res.on('data', (d) => {
                responseBody += d;
            });
    
            res.on('end', () => {
                // Add validation on 'responseBody' here if required. For ex, your status code is 200 but data might be empty
                resolve();
            });
        });
    };

    let requestOptionsStep3 = {
        'hostname': endpoint,
        'method': 'POST',
        'path': '/play',
        'port': 80,
        //'body': JSON.stringify({ 'form': { 'username': 'canary', 'invitee': 'opponent'}}),
        'protocol': 'http:'
    };

    headers['set-cookie'] = rHeaders['set-cookie'];
    requestOptionsStep3['headers'] = headers;

    await synthetics.executeHttpStep('Start game', requestOptionsStep3, startGame, stepConfig);
};


exports.handler = async () => {
    return await apiCanaryBlueprint();
};